// This is your Prisma schema file for Paperback Cover Generator
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  creditBalance Int       @default(100) @map("credit_balance") // Mock credits for future payment system
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // NextAuth relations
  accounts Account[]
  sessions Session[]
  
  // Application relations
  projects Project[]
  uploadedFiles UploadedFile[]
  downloads Download[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Project table for storing book cover designs
model Project {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id") // Nullable for initial implementation
  name        String   @default("Untitled Project")
  
  // Book details as JSON (title, author, pageCount, trimSize, paperType)
  bookData    Json     @map("book_data")
  
  // Design data as JSON (all the design customizations)
  designData  Json     @map("design_data")
  
  // Cover image metadata
  coverImageUrl     String? @map("cover_image_url")     // Front cover image URL
  aiBackImageUrl    String? @map("ai_back_image_url")   // AI-generated back cover image URL
  
  // Project status
  status      ProjectStatus @default(DRAFT)
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  downloads   Download[]
  
  @@map("projects")
  @@index([userId])
  @@index([status])
  @@index([updatedAt])
}

// Uploaded file tracking
model UploadedFile {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  filename    String   // The blob storage filename/path
  url         String   @db.Text // The full blob URL (no unique constraint due to size)
  originalName String? @map("original_name") // Original filename from user
  contentType String   @map("content_type")
  size        Int      // File size in bytes
  width       Int?     // Image width if applicable
  height      Int?     // Image height if applicable
  
  // Metadata
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("uploaded_files")
  @@index([userId])
  @@index([createdAt])
}

// Download tracking for exports
model Download {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  projectId   String?  @map("project_id") // Optional, exports can be made without saving project
  fileType    String   @map("file_type")  // PNG, PDF
  creditsUsed Int      @map("credits_used")
  fileSize    Int      @map("file_size")  // File size in bytes
  fileName    String   @map("file_name")  // Generated filename
  
  // Metadata
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("downloads")
  @@index([userId])
  @@index([createdAt])
}

// Project status enum
enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
